// shortcut: icon list v2

Comment
| Made by pfg
| https://routinehub.co/user/pfg
| /u/pfg___
| pfg#4865

GetDictionaryFromInput
SetVariable Input

Text "Icon List v2" -> v:ThisShortcut

createfolder service="iCloud Drive" "/IconListV2"
createfolder service="iCloud Drive" "/IconListV2/MyLists"


/*
// Usage: Escape "text"
@defmacro Escape @:text{type:text}
    runShortcut v:ThisShortcut false ^(Dictionary{ action: Escape, text: "\(@:text)" })
@defend
*/

GetVariable v:Input:action

// runShortcut v:ThisShortcut false ^(Dictionary{ action: Escape, text: "text" })
// escapes a string for use in a vcard
if Equals "Escape"
    GetVariable v:Input:text
    replacetext "\\" "\\\\"
    replacetext (Text "\n") " "
    replacetext ";" "\\;"
    exitShortcut
otherwise
end

// runShortcut v:ThisShortcut false ^(Dictionary{ action: CreateCard, carddata: {name, description, note, photo?} })
// creates a text out of a dictionary containing card data
if Equals "CreateCard" 
    getVariable v:Input:carddata -> v:CardData

    if ^(Count "Characters" ^(v:CardData:photo)) "Equals" 1
        text ""
    otherwise
        text "PHOTO;ENCODING=b:\(v:CardData:photo)"
    end -> mv:Photo

    if ^(Count "Characters" ^(v:CardData:name)) "Equals" 0
        text "No Title"
    otherwise
        getVariable v:CardData:name
    end -> mv:Name

    text -> mv:Result
    | BEGIN:VCARD
    | VERSION:3.0
    | N;CHARSET=utf-8:\(runShortcut v:ThisShortcut false ^(Dictionary{ action:Escape, text: mv:Name }));;;
    | ORG;CHARSET=utf-8:\(runShortcut v:ThisShortcut false ^(Dictionary{ action:Escape, text: v:CardData:description }))
    | NOTE;CHARSET=utf-8:\(runShortcut v:ThisShortcut false ^(Dictionary{ action:Escape, text: v:CardData:note }))
    | \(mv:Photo)
    | END:VCARD

    // return as text
    exitShortcut ^(mv:Result)
otherwise
end

// runShortcut v:ThisShortcut false ^(Dictionary{ action: AsContact, vcard: "<vCard Text Here>" }) 
// converts a given vcard string to a contact
if Equals "AsContact"
    getVariable v:Input:vcard
    setName "a.vcf" -> mv:vCard
    exitShortcut ^(mv:vCard{as:Contact})
otherwise
end

// runShortcut v:ThisShortcut false ^(Dictionary{ action: ChoosePhoto }) 
// prompts to select a photo
if Equals "ChoosePhoto"
    selectphotos selectmultiple=false -> mv:SelectedPhoto

    // resize to 123x123 (@3x)
    resizeimage width=123 -> v:Image
    getVariable v:Image{as:Image,get:Height}
    
    if "Is Greater Than" 123
        getVariable ^(v:Image) -> v:FilledImage
        resizeimage ^(mv:SelectedPhoto) width="" height=123 -> v:Image
    otherwise
        resizeimage ^(mv:SelectedPhoto) width="" height=123 -> v:FilledImage
    end
    
    // place on top of a transparent image to make a 123x123
    Text "R0lGODlhAQABAIABAAAAAP///yH5BAEAAAEALAAAAAABAAEAAAICTAEAOw=="
    base64encode mode="Decode"
    resizeimage width=123 height=123 -> mv:TransparentImage

    overlayimage ^(mv:TransparentImage) v:Image showimageeditor=false position="Center" -> v:Image
    overlayimage ^(mv:TransparentImage) v:Image showimageeditor=false position="Center" width=87 height=87 -> v:FitImage
    overlayimage ^(mv:TransparentImage) v:FilledImage showimageeditor=false position="Center" -> v:FilledImage
    
    base64encode ^(v:Image) mode="Encode" linebreaks="None" -> v:Image
    base64encode ^(v:FitImage) mode="Encode" linebreaks="None" -> v:FitImage
    base64encode ^(v:FilledImage) mode="Encode" linebreaks="None" -> v:FilledImage
    

    // show both and pick which to use
    text -> v:vCard
    | BEGIN:VCARD\nVERISION:3.0\nPHOTO;ENCODING=b:\(v:FilledImage)\nNOTE;CHARSET=utf-8:filledImage\nN;CHARSET=utf-8:Fill Circle;;;\nEND:VCARD
    | BEGIN:VCARD\nVERISION:3.0\nPHOTO;ENCODING=b:\(v:Image)\nNOTE;CHARSET=utf-8:standardImage\nN;CHARSET=utf-8:Original Size;;;\nEND:VCARD
    | BEGIN:VCARD\nVERISION:3.0\nPHOTO;ENCODING=b:\(v:FitImage)\nNOTE;CHARSET=utf-8:fitImage\nN;CHARSET=utf-8:Fit in Circle;;;\nEND:VCARD
    | BEGIN:VCARD\nVERISION:3.0\nNOTE;CHARSET=utf-8:noImage\nN;CHARSET=utf-8:No Image;;;\nEND:VCARD
    | BEGIN:VCARD\nVERISION:3.0\nNOTE;CHARSET=utf-8:differentPhoto\nN;CHARSET=utf-8:Choose Different Photo;;;\nEND:VCARD
    
    runShortcut v:ThisShortcut false ^(Dictionary{ action: AsContact, vcard: v:vCard }) 
    chooseFromList -> mv:ChosenItem

    getVariable mv:ChosenItem{as:Contact,get:Notes}

    if Equals "filledImage"; getVariable v:FilledImage; otherwise; end
    if Equals "standardImage"; getVariable v:Image; otherwise; end
    if Equals "fitImage"; getVariable v:FitImage; otherwise; end
    if Equals "noImage"; text " "; otherwise; end
    if Equals "differentPhoto"; runShortcut v:ThisShortcut false ^(Dictionary{ action: ChoosePhoto }); otherwise; end

    exitShortcut
otherwise
end

// runShortcut v:ThisShortcut false ^(Dictionary{ action: EditItem, carddata: {name, description, note, photo} }) 
// edits a given item
if Equals "EditItem"

    getVariable v:Input:carddata -> v:CardData

    nothing -> v:ActionList
    
    // 
    text -> mv:vCard
    | \(runShortcut v:ThisShortcut false ^(Dictionary{ action: CreateCard, carddata: v:CardData }))
    | BEGIN:VCARD\nVERISION:3.0\nN;CHARSET=utf-8:-------;;;\nEND:VCARD
    | BEGIN:VCARD\nVERISION:3.0\nNOTE;CHARSET=utf-8:setIcon\nN;CHARSET=utf-8:Icon;;;\nEND:VCARD
    | BEGIN:VCARD\nVERISION:3.0\nNOTE;CHARSET=utf-8:setName\nN;CHARSET=utf-8:Title;;;\nORG;CHARSET=utf-8:\(runShortcut v:ThisShortcut false ^(Dictionary{ action:Escape, text: v:CardData:name }))\nEND:VCARD
    | BEGIN:VCARD\nVERISION:3.0\nNOTE;CHARSET=utf-8:setDescription\nN;CHARSET=utf-8:Description;;;\nORG;CHARSET=utf-8:\(runShortcut v:ThisShortcut false ^(Dictionary{ action:Escape, text: v:CardData:description }))\nEND:VCARD
    | BEGIN:VCARD\nVERISION:3.0\nNOTE;CHARSET=utf-8:setNote\nN;CHARSET=utf-8:Note (Hidden);;;\nORG;CHARSET=utf-8:\(runShortcut v:ThisShortcut false ^(Dictionary{ action:Escape, text: v:CardData:note }))\nEND:VCARD
    | BEGIN:VCARD\nVERISION:3.0\nN;CHARSET=utf-8:-------;;;\nEND:VCARD
    | BEGIN:VCARD\nVERISION:3.0\nNOTE;CHARSET=utf-8:doneEditing\nN;CHARSET=utf-8:Save;;;\nEND:VCARD

    runShortcut v:ThisShortcut false ^(Dictionary{ action: AsContact, vcard: mv:vCard })

    chooseFromList -> mv:ChosenItem

    getVariable mv:ChosenItem{as:Contact,get:Notes} -> mv:Notes

    if Equals "setIcon"
        runShortcut v:ThisShortcut false ^(Dictionary{ action: ChoosePhoto }) -> mv:NewPhoto
        v:CardData = setDictionaryValue ^(v:CardData) "photo" mv:NewPhoto

        nothing
    otherwise
    end
    

    if Equals "setName"
        askforinput question="New Name" defaultanswer=v:CardData:name -> mv:NewValue
        v:CardData = setDictionaryValue ^(v:CardData) "name" mv:NewValue

        nothing
    otherwise
    end

    if Equals "setDescription"
        askforinput question="New Description" defaultanswer=v:CardData:description -> mv:NewValue
        v:CardData = setDictionaryValue ^(v:CardData) "description" mv:NewValue
        
        nothing
    otherwise
    end

    if Equals "setNote"
        askforinput question="New Note" defaultanswer=v:CardData:note -> mv:NewValue
        v:CardData = setDictionaryValue ^(v:CardData) "note" mv:NewValue
        
        nothing
    otherwise
    end

    if Equals "doneEditing"
        exitShortcut ^(v:CardData)
    otherwise
    end

    runShortcut v:ThisShortcut false ^(Dictionary{ action: EditItem, carddata: v:CardData }) 
    exitShortcut
otherwise
end

// runShortcut v:ThisShortcut false ^(Dictionary{ action: NewItem })
// creates a new list item and starts editing it
if Equals "NewItem"
    runShortcut v:ThisShortcut false ^(Dictionary{ action: EditItem, carddata: {name: "", description: "", note: "", photo: " "} })

    exitShortcut
otherwise
end

// Dictionary{ action: RemoveItemAtIndex, list: [], index: num }
// setDictionaryValue list [...items]
// runShortcut v:ThisShortcut false
// ---------------------------------
// removes a specified item from a given list
if Equals "RemoveItemAtIndex"
    getVariable v:Input:index -> v:Index
    getVariable v:Input:list -> v:List
    count Items -> v:Length

    // If the list has one item, return an empty list
    if ^(v:Length) Equals 1
        list []
        exitShortcut
    otherwise
    end

    // If the index is 1, return 2..
    if ^(v:Index) Equals 1
        getitemfromlist ^(v:List) get="Items in Range" 2 v:Length
        exitShortcut
    otherwise
    end

    // If the index is equal to the length, return 1..length-1
    if ^(v:Index) Equals v:Length
        getitemfromlist ^(v:List) get="Items in Range" 1 (Calculate ^(v:Length) "-" 1)
        exitShortcut
    otherwise
    end

    // Otherwise get items 1..Index-1 and get items Index+1..Length

    getitemfromlist ^(v:List) get="Items in Range" 1 (Calculate ^(v:Index) "-" 1)
    setVariable v:ResList
    getitemfromlist ^(v:List) get="Items in Range" (Calculate ^(v:Index) "+" 1) v:Length
    addToVariable v:ResList

    exitShortcut
otherwise
end

// Dictionary{ action: AddItemAtIndex, list: [], item: any, index: num }
// setDictionaryValue list [...items]
// runShortcut v:ThisShortcut false
// ---------------------------------
// inserts a specified item at a specified index of a specified list
if Equals "AddItemAtIndex"
    getVariable v:Input:index -> v:Index
    getVariable v:Input:item -> v:ItemToAdd
    getVariable v:Input:list -> v:List
    count Items -> v:Length

    // If the list has zero items, return a list with the item
    if ^(v:Length) Equals 0
        getVariable v:ItemToAdd
        exitShortcut
    otherwise
    end

    // If the index is 1, return a list with the item and the list
    if ^(v:Index) Equals 1
        getVariable v:ItemToAdd
        setVariable v:ResList
        getVariable v:List
        addToVariable v:ResList
        
        exitShortcut
    otherwise
    end

    // If the index is 1, return a list with the list and the item
    if ^(v:Index) Equals v:Length
        getVariable v:List
        setVariable v:ResList
        getVariable v:ItemToAdd
        addToVariable v:ResList
        
        exitShortcut
    otherwise
    end

    // Otherwise, get items 1..index-1 and index..end and add the item in the middle
    getitemfromlist ^(v:List) get="Items in Range" 1 (Calculate ^(v:Index) "-" 1)
    setVariable v:ResList

    getVariable v:ItemToAdd
    addToVariable v:ResList

    getitemfromlist ^(v:List) get="Items in Range" v:Index v:Length
    addToVariable v:ResList

    exitShortcut
otherwise
end

// to move an item, repeat over each item of the list adding an item before it with "Add here" and note index

// Dictionary{ action: EditList, items: [] }
// setDictionaryValue items [...items]
// runShortcut v:ThisShortcut false
// ---------------------------------
// edits a given list of items
// remember, to pass a list into a dictionary you need to create a dictionary with no list and set dictionary value
if Equals "EditList"

    getVariable v:Input:items -> v:Items

    repeatWithEach ^(v:Items)

        getVariable v:Items
        setdictionaryvalue key="note" value=(v:"Repeat Index") -> mv:CardData
        runShortcut v:ThisShortcut false ^(Dictionary{ action: CreateCard, carddata: mv:CardData })
        
    end repeat

    combinetext separator="New Lines" -> mv:CurrentListvCard

    text -> mv:vCard
    | \(mv:CurrentListvCard)
    | BEGIN:VCARD\nVERISION:3.0\nN;CHARSET=utf-8:-------;;;\nEND:VCARD
    | BEGIN:VCARD\nVERISION:3.0\nNOTE;CHARSET=utf-8:addItem\nN;CHARSET=utf-8:Add Item;;;\nEND:VCARD

    runShortcut v:ThisShortcut false ^(Dictionary{ action: AsContact, vcard: mv:vCard })
    
    chooseFromList -> mv:ChosenItem
    getVariable mv:ChosenItem{as:Contact, get:Notes} -> mv:ChosenData

    if Equals "addItem"
        runShortcut v:ThisShortcut false ^(Dictionary{ action: NewItem })
        addToVariable v:Items

        nothing
    otherwise
    end

    count Items

    if Equals 0
        nothing
    otherwise
        number mv:ChosenData -> mv:Index

        getVariable v:Items
        getitemfromlist a{
          get="Item At Index"
          index=mv:Index
        } -> mv:ItemToEdit
        runShortcut v:ThisShortcut false ^(Dictionary{ action: EditItem, carddata: mv:ItemToEdit }) -> mv:NewItem

        // remove item from list
        Dictionary{ action: RemoveItemAtIndex, list: [], index: mv:Index }
        SetDictionaryValue list v:Items
        runShortcut v:ThisShortcut false -> v:Items

        // insert item back into list at the index
        Dictionary{ action: AddItemAtIndex, list: [], item: mv:NewItem, index: mv:Index }
        SetDictionaryValue list v:Items
        runShortcut v:ThisShortcut false -> v:Items

        nothing
    end

    Dictionary{ action: EditList, items: [] }
    setDictionaryValue items v:Items
    runShortcut v:ThisShortcut false

    exitShortcut
otherwise
end

runShortcut v:ThisShortcut false ^(Dictionary{ action: EditList })
exitShortcut
