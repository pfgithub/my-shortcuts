getDictionaryFromInput
setVariable (v:Data)

Comment
| Created by
| @pfg#4865
| https://routinehub.co/user/pfg
| /u/pfg___

Dictionary{
  name: "Check For Updates",
  version: "1.6.1"
} -> mv:CheckForUpdatesDictionary

Text "noerr" -> v:"Repeat Item"
Text "noerr" -> v:"Repeat Index"

GetFile a{
  service="iCloud Drive"
  showDocumentPicker=false
  filePath="AutoUpdateData.json"
  errorIfNotFound=false
}

SetDictionaryValue a{key=793 value=(mv:CheckForUpdatesDictionary)}

SaveFile a{
  service="iCloud Drive"
  askWhereToSave=false
  destinationPath="AutoUpdateData.json"
  overwriteIfFileExists=true
}

Text "AutoUpdateData.json" -> v:Filename
Text "Check For Updates" -> v:ThisShortcut

getVariable(v:Data{key:action})
if Equals "Compare Versions"
  getVariable(v:Data{key:current})
  count Characters
  if Equals 0
    getVariable(v:Data{key:new})
    count Characters
    if Equals 0
      Text "Up to date"
      exitShortcut
    otherwise
    end if
  otherwise
  end if

  dictionary{
    version: (v:Data{key:current})
    action: "Split Decimals"
  }
  RunShortcut (v:ThisShortcut) false -> mv:SplitDecimalResult

  dictionary{
    action: "Split Decimals"
    version: (v:Data{key:new})
  }
  RunShortcut (v:ThisShortcut) false -> mv:SplitDecimalResultNew
  
  GetDictionaryValue a{get=Value,key=number}
  if "Is Greater Than" (mv:SplitDecimalResult{as:Dictionary,key:number})
    Text "New version available"
    ExitShortcut
  otherwise
    if "Is Less Than" (mv:SplitDecimalResult{as:Dictionary,key:number})
      Text "Up to date"
      exitShortcut
    otherwise
      Dictionary{
        action:"Compare Versions"
        current: (mv:SplitDecimalResult{as:Dictionary,key:number})
        new: (mv:SplitDecimalResultNew{as:Dictionary,key:number})
      }
      RunShortcut (v:ThisShortcut) false
      ExitShortcut
    end if
  end if
  
  Text "Up to date"
  exitShortcut  
  
otherwise
end if

if Equals "Split Decimals"
  getVariable (v:Data{key:version})
  MatchText "^([0-9]+).?"
  GetGroupFromMatchedText "Group At Index" 1 -> mv:GroupFromMatchedText
  Count Items
  If Equals 0
    Number 0
  otherwise
    Number (mv:GroupFromMatchedText)
  end if -> mv:IfResult
  
  getVariable (v:Data{key:version})
  replaceText "^([0-9]+).?" "" a{caseSensitive: true, regularExpression: true} -> mv:ReplacedText
  
  Dictionary{
    number: (mv:IfResult)
    next: (mv:ReplacedText)
  }
  ExitShortcut
otherwise
end if

if Equals "Pick Shortcut To Update"
  
  GetVariable (v:Data{key:list})
  GetDictionaryFromInput -> mv:Dictionary
  GetDictionaryValue "All Keys"
  repeatWithEach
    
    getVariable (v:Data{key:List})
    getDictionaryValue Value (v:"Repeat Item") -> v:Scut
    getDictionaryValue Value data -> v:WebData
    
    GetVariable (v:Scut{as:dictionary,key:saved})
    SetVariable LocalData
    
    Text "BEGIN:VCARD\nVERSION:3.0\nN;ENCODING=utf-8:\(v:Scut{as:Dictionary,key:name})\nORG:\(v:LocalData{as:Dictionary,key:version}) -> \(v:WebData{as:Dictionary,key:version});\nPHOTO;ENCODING=b:\(v:Scut{as:Dictionary,key:icon})\nEND:VCARD" // issue 8/9
    
  end repeat
  combineText "New Lines"
  // TODO text copypaste from shortcuts
  SetName "\(v:Scut{as:dictionary,key:name}).vcf" -> mv:SetName
  GetVariable (mv:SetName{as:Contact})
  ChooseFromList "Shortcuts with available updates" -> mv:ChosenItem
  
  if Equals "Don't Update"
    Nothing
    ExitShortcut
  otherwise
  end
  
  GetVariable (mv:Dictionary)
  GetDictionaryValue Value (mv:ChosenItem)
  GetDictionaryFromInput
  SetVariable ShortcutToUpdate
  GetDictionaryValue Value data -> mv:DictionaryValue
  
  Text "Update for \(v:ShortcutToUpdate{key:name}):\nVersion \(mv:DictionaryValue{as:Dictionary,key:Version})\n\n\(mv:DictionaryValue{as:Dictionary,key:Notes})" -> mv:Text
  ChooseFromMenu (mv:Text)
  | Update
  | I no longer have this shortcut
  | Back
  case Update
    getVariable (v:ShortcutToUpdate)
    ExitShortcut
  case No longer have
    getFile "iCloud Drive" false (v:Filename) false
    setDictionaryValue (v:ShortcutToUpdate{key:id}) "removed"
    saveFile "iCloud Drive" false (v:Filename) true
    showResult "This shortcut will no longer be checked for updates unless you run it again."
    nothing
    exitShortcut
  case Back
  end
  
  getVariable(v:Data)
  runShortcut (v:ThisShortcut) false
  exitShortcut
  
otherwise
end if

if Equals "List Updatable Shortcuts"
  Dictionary{}
  SetVariable PickToUpdate
  
  getVariable (v:Data{key:list})
  repeatWithEach
    
    if Equals "removed"
    otherwise
      Text (v:"Repeat Item")
      getDictionaryFromInput
      getDictionaryValue Value name
      getVariable (v:PickToUpdate)
      setDictionaryValue (v:"Repeat Item"{as:Dictionary key:name}) (v:"Repeat Item")
      setVariable (v:PickToUpdate)
    end if

  end repeat
  
  getVariable (v:PickToUpdate)
  exitShortcut

otherwise
end if

if Equals "Check For Updates"
  
  Nothing -> v:Summary
  GetMyShortcuts -> v:MyShortcuts
  GetFile "iCloud Drive" false (v:Filename) true -> v:File
  
  getVariable(v:Data{key:ids})
  count Items
  if Equals 0
    
    text "All your compatible shortcuts are up to date!"
    setVariable UpToDateText
    
    getVariable (v:File)
    getDictionaryValue "All Keys"
    
  otherwise
    
    Nothing
    SetVariable UpToDateText
    
    GetVariable (v:Data{key:ids})
    
  end if
  
  repeatWithEach
    
    getVariable (v:File)
    getDictionaryValue Value (v:"Repeat Item") -> mv:DictionaryValue
    count Items
    if Equals 0
      text "removed"
    otherwise
      getVariable (mv:DictionaryValue)
    end if
    
    setVariable (v:ShortcutData)
    
    if Equals removed
      nothing
    otherwise
      if ^(v:MyShortcuts) Equals (v:ShortcutData{as:Dictionary,key:name})
      otherwise
        
        Text "\(v:ShortcutData{as:Dictionary,key:name}) (routinehub id \(v:"Repeat Item")) might not be installed anymore. If you don't have it anymore, remove it from the Manage Shortcuts button on the main menu."
        AddToVariable Summary
        if ^(text "false") Equals "true"
          GetVariable (v:File)
          SetDictionaryValue (v:"Repeat Item") "removed"
          SaveFile "iCloud Drive" false (v:Filename) true
        otherwise
        end if
        
        Nothing
        
      end if
      
      URL "https://routinehub.co/api/v1/shortcuts/\(v:"Repeat Item")/versions/latest"
      GetContentsOfURL
      
      GetDictionaryFromInput
      SetVariable URLCont
      getDictionaryValue Value result
      getDictionaryFromInput -> mv:Result
      if Equals error
        text "The shortcut \(mv:Result{key:name}) (routinehub id \(v:"Repeat Item")) could not be checked for updates because of the RoutineHub error: \(v:URLCont{key:message})"
        AddToVariable Summary
        GetVariable (v:File)
  
        SetDictionaryValue (v:"Repeat Item") removed
        saveFile "iCloud Drive" false (v:Filename) true
        setVariable File
        
      otherwise
      end if
      
      GetVariable (v:File)
      GetDictionaryValue Value (v:"Repeat Item") -> mv:Saved
      
      Dictionary{
        action: "Compare Versions",
        current: (mv:Saved{as:Dictionary,key:version})
        new: (v:URLCont{key:Version})
      }
      runshortcut a{
        shortcut=(v:ThisShortcut),
        showwhilerunning=false
      }

      if a{
        input="Equals",
        value="Up to date"
      }
        Nothing
      otherwise
        getvariable a{
          variable=(v:URLCont{key:URL})
        }
        replacetext a{
          findtext="/shortcuts",
          replacewith="/shortcuts/api/records",
          casesensitive=true,
          regularexpression=false
        }
        getcontentsofurl

        getdictionaryvalue a{
          get="Value",
          key="fields"
        }
        getdictionaryvalue a{
          get="Value",
          key=icon
        }
        getdictionaryvalue a{
          get="Value",
          key=downloadURL
        }
        getcontentsofurl
        
        getimagesfrominput
        
        resizeimage a{
          width=32
        }
        base64encode a{
          mode="Encode",
          linebreaks="None"
        } -> mv:Base64Encoded
        
        dictionary {
          id: (v:"Repeat Item")
          name: (mv:Saved{as:dictionary,key:name})
          data: (v:URLCont)
          saved: (mv:Saved{as:dictionary,key:text})
          icon: (mv:Base64Encoded)
        }
        
      end if
      
    end if
    
  end repeat -> mv:RepeatResults
  count a{
    count="Items"
  } -> mv:OtherCount
  Text "\n\n\n" -> v:"__temp"
  
  getVariable (v:Summary)
  count a{
    count="Items"
  }
  if a{
    input="Equals",
    value=0
  }
  otherwise
    getvariable a{
      variable=(v:Summary)
    }
    combinetext a{
      separator="Custom",
      custom=(v:"__temp")
    } -> mv:CombinedText
    showAlert a{showcancelbutton=true}
    | Some potential errors occured while checking for updates:
    |
    | \(mv:CombinedText)
    |
    | ok=continue
    | cancel=stop
    
  end if
  
  getvariable a{
    variable=(mv:OtherCount)
  }
  if "Equals" 0
    getVariable(v:UpToDateText)
    count Items
    if "Equals" 0
    otherwise
      showresult (v:UpToDateText)
    end if

    exitShortcut

  otherwise

    getVariable(mv:RepeatResults)

  end if -> mv:IfResult

  Dictionary{action:"List Updatable Shortcuts", list: [a]}
  SetDictionaryValue list (mv:IfResult)
  RunShortcut (v:ThisShortcut) false -> mv:RunShortcut

  Dictionary{action:"Pick Shortcut To Update", list:(mv:RunShortcut)}

  RunShortcut (v:ThisShortcut) false
  getdictionaryfrominput
  setvariable a{
    variable="ToUpdate"
  }
  Count Items
  if a{
    input="Equals",
    value=0
  }
    exitShortcut
  otherwise
  end
  
  getVariable (v:ToUpdate)
  setVariable (v:ToUpdate)
  GetDictionaryValue Value data -> mv:DictionaryValue
  Dictionary{
    action: "Install Shortcut"
    id:(v:ToUpdate{as:Dictionary,key:id})
    web: (mv:DictionaryValue)
    name: (v:ToUpdate{as:Dictionary,key:name})
  }
  RunShortcut (v:ThisShortcut) false

  exitShortcut
  
  
otherwise
end if

if Equals "Install Shortcut"
  getVariable (v:Data{key:web})
  count Items
  if Equals 0
    url "https://routinehub.co/api/v1/shortcuts/\(v:Data{key:id})/versions/latest"
    getContentsOfURL
  otherwise
    getVariable (v:Data{key:web})
  end

  getDictionaryFromInput
  setVariable VersionData

  getfile a{
    service="iCloud Drive",
    showdocumentpicker=false,
    filepath="\(v:Filename)",
    errorifnotfound=false
  } -> mv:File
  getDictionaryValue Value (v:Data{key:id})
  SetDictionaryValue version (v:VersionData{key:Version}) -> mv:Dictionary

  getVariable (mv:File)
  setDictionaryValue (v:Data{key:id}) (mv:Dictionary)

  savefile a{
    service="iCloud Drive",
    askwheretosave=false,
    destinationpath=(v:Filename),
    overwriteiffileexists=true
  }
  url "https://routinehub.co/download/\(v:VersionData{key:id})"
  OpenURLs
  ExitShortcut
  
otherwise
end

List
| Check for Updates
| Add unsupported shortcut
| Manage Shortcuts

ChooseFromList

if Equals "Check for Updates"
  Dictionary{action:"Check For Updates"}
  runShortcut (v:ThisShortcut) false
  exitShortcut
otherwise
end

if Equals "Add unsupported shortcut"
  /*
  showAlert "Alert"
  | To check for updates on a shortcut that does not have cfu integrated, add it here. You need to know the shortcut's name, routinehub ID, and what version you downloaded.
  GetMyShortcuts
  ChooseFromList
  GetName
  SetVariable (v:scutname)
  AskForInput "RoutineHub ID for \(v:scutname)" -> mv:rhid
  AskForInput "Your Current Version (use 0 if unsure)" 0 Text -> mv:version

  Dictionary{
    name: (v:scutname)
    version: (mv:version)
  } -> mv:Dictionary
  getfile a{
    service="iCloud Drive",
    showdocumentpicker=false,
    filepath=(v:Filename),
    errorifnotfound=false
  }
  SetDictionaryValue (mv:rhid) (mv:Dictionary)
  savefile a{
    service="iCloud Drive",
    askwheretosave=false,
    destinationpath=(v:Filename),
    overwriteiffileexists=true
  }
  
  showResult
  | Shortcut \(v:scutname) can now be checked for updates.

  Nothing
  */
  showalert "Alert" "Coming Soon!"
otherwise
end

if Equals "Manage Shortcuts"
  Dictionary{}
  SetVariable (v:Upablescuts)
  GetFile "iCloud Drive" false (v:Filename) false
  SetVariable File
  GetDictionaryValue "All Keys"
  RepeatWithEach
    getVariable (v:File)
    getDictionaryValue Value (v:"Repeat Item") -> mv:DictionaryValue
    if Equals "removed"
    otherwise
      GetVariable (v:Upablescuts)
      SetDictionaryValue (mv:DictionaryValue{as:Dictionary,key:name}) (v:"Repeat Item")
      setVariable (v:Upablescuts)
    end
  end repeat

  getVariable (v:Upablescuts)
  chooseFromList "Choose shortcuts to manage" true false

  choosefrommenu "What to do?"
  | Stop checkinf for updates
  case "stop checking..."
    
  end
  
  repeatwitheach
    getVariable(v:File)
    setDictionaryValue(v:"Repeat Item") "removed"
    setVariable (v:File)
  end
  
  getVariable (v:File)
  savefile a{
    service="iCloud Drive",
    askwheretosave=false,
    destinationpath=(v:Filename),
    overwriteiffileexists=true
  }
  showResult
  | Check for updates will no longer check the shortcuts you selected for updates (unless you run them again)
  
  nothing


otherwise
end

Nothing
RunShortcut (v:ThisShortcut) false
