getdictionaryfrominput -> mv:"Get Dictionary from Input"
setvariable Data

comment "Created by\n@pfg#4856\nhttps://routinehub.co/user/pfg\n/u/pfg___"

CreateFolder "iCloud Drive" "CFU"

text "Check For Updates" -> mv:ThisShortcut

dictionary {name: "Check For Updates", version: "1.6.1"} -> mv:Dictionary
getfile showdocumentpicker=false filepath="AutoUpdateData.json" errorifnotfound=false -> mv:"Get File"
setdictionaryvalue key=793 value=mv:Dictionary -> mv:"Set Dictionary Value"
savefile askwheretosave=false destinationpath="AutoUpdateData.json" overwriteiffileexists=true -> mv:"Save File"
comment "Usage:\n\nDictionary(name=shortcut name,version=version)\n\nGet File /Shortcuts/AutoUpdateData.json\n\nSet Dictionary Value (routinehub id, (dictionary magic var))\n\nSave File /Shortcuts/AutoUpdateData.json\n\naction: Compare Versions\ncurrent: current version number\nnew: new version number\nresult: Up to date|New version available\n\naction: Split Decimals\nversion: version number\noutput: {number: first number, next: next version number}\n\n"
text "AutoUpdateData.json"
setvariable Filename
getvariable v:Data.action

// FROM iconlistv2

@set Escape (runShortcut mv:ThisShortcut false ^(Dictionary{ action: Escape, text: @:text }))
// @:Escape{text:hi}
// ————————————————————-----
// escapes a string for use in a vcard
if Equals "Escape"
    GetVariable v:Data.text
    replacetext "\\" "\\\\"
    replacetext (Text "\n") " "
    replacetext ";" "\\;"
    exitShortcut
otherwise
end


@set CreateCard (runShortcut mv:ThisShortcut false ^(Dictionary{ action: CreateCard, carddata: @:carddata }))
// runShortcut v:ThisShortcut false ^(Dictionary{ action: CreateCard, carddata: {name, description, note, photo?} })
// ————————————————————-----
// creates a text out of a dictionary containing card data
if Equals "CreateCard" 
    getVariable v:Data.carddata -> v:CardData

    if ^(Count "Characters" ^(v:CardData:photo)) "Equals" 1
        text ""
    otherwise
        text "PHOTO;ENCODING=b:\(v:CardData:photo)"
    end -> mv:Photo

    if ^(Count "Characters" ^(v:CardData:name)) "Equals" 0
        text "No Title"
    otherwise
        getVariable v:CardData:name
    end -> mv:Name

    text -> mv:Result
    | BEGIN:VCARD
    | VERSION:3.0
    | N;CHARSET=utf-8:\(@:Escape{text: mv:Name});;;
    | ORG;CHARSET=utf-8:\(@:Escape{text: v:CardData:description})
    | NOTE;CHARSET=utf-8:\(@:Escape{text: v:CardData:note})
    | \(mv:Photo)
    | END:VCARD

    // return as text
    exitShortcut ^(mv:Result)
otherwise
end

// END FROM

// todo the new cfu
// Dictionary {version, check: "RoutineHub", id: "1234"}

/*

Shortcuts/CFU contains:
[uniqueID: string]: {name: name, version: version}

*/


//
// {action:"GetLocalShortcutData"}
//   ->
// {id:name} // no "removed"
// Gets shortcut data and resaves it to the local file
if Equals "UpgradeOldCFUData"

    Dictionary{} -> v:ResDictionary
    List["---"] -> v:WarningList

    GetFile "iCloud Drive" false v:Filename false -> mv:LocalData
    GetDictionaryValue "All Keys"
    repeatwitheach
    
        GetVariable v:"Repeat Item" -> mv:Key
        GetVariable mv:LocalData
        GetDictionaryValue "Value" mv:Key -> mv:Value
        
        if ^mv:Value Equals "removed"
        otherwise
        
            // should be {name: name, version: version}
            GetVariable mv:Value.name
            if ^(Count Items) Equals 0
                GetVariable mv:Value.Name
            otherwise
                GetVariable mv:Value.name
            end -> mv:Name
            if ^(Count Items) Equals 0
                // Add Warning
                Text "A shortcut is missing its name in the cfu dictionary. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0'}"
                AddToVariable v:WarningList
            otherwise
                GetVariable mv:Value.version
                if ^(Count Items) Equals 0
                    GetVariable mv:Value.Version
                otherwise
                    GetVariable mv:Value.version
                end -> mv:Version
                if ^(Count Items) Equals 0
                    // Add Warning
                    Text "The shortcut `\(mv:Name)` is missing its version in the cfu dictionary. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0'}"
                    AddToVariable v:WarningList
                otherwise
                    Dictionary{name: mv:Name, version: mv:Version, check: "RoutineHub", id: mv:Key}
                    SaveFile "iCloud Drive" false "CFU/\(mv:Name)" true
                end
            end
            
        end
        Nothing
    end
    
    // Remove old data
    GetVariable mv:LocalData
    DeleteFiles confirmbeforedeleting=false
    
    ExitShortcut ^(v:WarningList)
    
otherwise
end

// {action: "DownloadRemoteShortcutData" uniqueid:, localdata:}
// -> 
// {result: "error", message: string}
// | {result: "success", remoteVersion, localVersion, uniqueID, name, description: "", directDownloadURL: ""}
if Equals "DownloadRemoteShortcutData"

    GetVariable v:Data.uniqueid -> mv:UniqueID
    GetVariable v:Data.localdata -> mv:Value

    // validate shortcut data
    GetVariable mv:Value.name
    if ^(Count Items) Equals 0
        GetVariable mv:Value.Name
    otherwise
        GetVariable mv:Value.name
    end -> mv:Name
    if ^(Count Items) Equals 0
        // Add Warning
        Dictionary{ result: error, message: "The shortcut with the id `\(mv:UniqueID)` is missing its name in its cfu file. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0'}" }
        ExitShortcut
    otherwise
    end
    GetVariable mv:Value.version
    if ^(Count Items) Equals 0
        GetVariable mv:Value.Version
    otherwise
        GetVariable mv:Value.version
    end -> mv:Version
    if ^(Count Items) Equals 0
        // Add Warning
        Dictionary{ result: "error", message: "The shortcut `\(mv:Name)` (`\(mv:UniqueID)`) is missing its version in its cfu file. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0'}" }
        ExitShortcut
    otherwise
    end
    GetVariable mv:Value.check
    if ^(Count Items) Equals 0
        GetVariable mv:Value.Check
        if ^(Count Items) Equals 0
            GetVariable mv:Value.service
            if ^(Count Items) Equals 0
                GetVariable mv:Value.Service
            otherwise
                GetVariable mv:Value.service
            end
        otherwise
            GetVariable mv:Value.Check
        end
    otherwise
        GetVariable mv:Value.check
    end -> v:Service
    if ^(Count Items) Equals 0
        // Add Warning
        Dictionary{ result: "error", message: "The shortcut `\(mv:Name)` (`\(mv:UniqueID)`) is missing its service in its cfu file. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0', Service: see docs for list}" }
        ExitShortcut
    otherwise
    end
    
    // Download data from web
    GetVariable v:Service
    MatchText "routine\\s*hub" casesensitive=false
    if ^(Count Items) Equals 0
    otherwise
        GetVariable mv:Value.id
        if ^(Count Items) Equals 0
            GetVariable mv:Value.ID
        otherwise
            GetVariable mv:Value.id
        end -> mv:ID
        if ^(Count Items) Equals 0
            // Add Warning
            Dictionary{ result: error, message: "The shortcut `\(mv:Name)` (`\(mv:UniqueID)`) is missing its routinehub id in its cfu file. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0', Service: 'RoutineHub', ID: '1234'}" }
            ExitShortcut
        otherwise
        end
        URL "https://routinehub.co/api/v1/shortcuts/\(mv:ID)/versions/latest"
        GetContentsOfURL -> mv:WebData
        GetVariable mv:WebData.result
        if Equals "success"
            // return version, notes, and download url
            Dictionary{
                result: success,
                remoteVersion: mv:WebData.Version,
                localVersion: mv:Version,
                uniqueID: mv:UniqueID,
                name: mv:Name,
                description: mv:WebData.Notes,
                directDownloadURL: "https://routinehub.co/download/\(mv:WebData.id)"
            }
            ExitShortcut
        otherwise
            Dictionary{ result: error, message: "The shortcut `\(mv:Name)` (routinehub `\(mv:ID)`) could not be checked for updates because of a routinehub error: \(mv:WebData.message)" }
            ExitShortcut
        end
    end
    
    Dictionary{ result: error, message: "The shortcut `\(mv:Name)` (`\(mv:UniqueID)`) uses a service which does not exist or is not supported yet. It uses `\(v:Service) but only `RoutineHub` is supported right now.`" }
    ExitShortcut
    
    /*
    GetVariable v:Service
    MatchText "url" casesensitive=false
    if ^(Count Items) Equals 0
    otherwise
        GetVariable mv:Value.jsonpath
        if ^(Count Items) Equals 0
            GetVariable mv:Value.JsonPath
        otherwise
            GetVariable mv:Value.jsonpath
        end -> v:JsonPath
        
        GetVariable mv:Value.url
        if ^(Count Items) Equals 0
            GetVariable mv:Value.URL
        otherwise
            GetVariable mv:Value.url
        end -> v:URL
    end
    */
otherwise
end

//
// {action: "DownloadAllRemoteShortcutData"}
//    ->
// [{version, description, directDownloadURL}]
// Downloads shortcut data off their download pages
// and save to CFU/__cache
if Equals "DownloadAllRemoteShortcutData"
    
    List ["---"] -> v:WarningList
    List ["---"] -> v:Result
    GetFile "iCloud Drive" false "CFU" false -> mv:InstalledShortcuts
    
    repeatwitheach ^(mv:InstalledShortcuts)
    
        GetName ^(v:"Repeat Item") -> mv:UniqueID
        GetDictionaryFromInput ^(v:"Repeat Item") -> mv:Value
        
        Dictionary {action: DownloadRemoteShortcutData, uniqueid: mv:UniqueID, localdata: mv:Value}
        RunShortcut mv:ThisShortcut false -> mv:RemoteShortcutData
        
        if ^(mv:RemoteShortcutData.result) Equals "error"
        
            // Add warning
            AddToVariable ^(mv:RemoteShortcutData.message) v:WarningList
            
        otherwise
        
            // Add to result
            AddToVariable ^(mv:RemoteShortcutData) v:Result
        
        end

    end
    
    Dictionary{warnings: [], result: []}
    SetDictionaryValue warnings v:WarningList
    SetDictionaryValue result v:Result
    ExitShortcut
    
otherwise
end

// make sure all shortcuts are installed and up to date and gives them an icon for the menu and make vcards out of them
// {action: "CompareVersions", shortcutdata: remoteShortcutData[]}
if Equals "CompareVersions"

    GetMyShortcuts -> mv:MyShortcuts // may take a long time

    List ["---"] -> v:WarningList
    List ["---"] -> v:ShortcutsNeedUpdating
    List ["---"] -> v:ShortcutsUpToDate
    
    repeatwitheach ^(v:Data.shortcutdata)
        if "Equals" "---"
        otherwise
        
            GetVariable v:"Repeat Item" -> v:RSD
        
            // check if installed
            if ^mv:MyShortcuts "Equals" v:RSD.name
                
                // is installed
                // compare version numbers
                
                // data will always be strings inside of a dictionary string value
                // and as such the data *should* be safe
                Dictionary{current: v:RSD.localVersion, new: v:RSD.remoteVersion} -> mv:SafeJSONData
                
                // TODO future: compare all at once rather than one at a time
                Text -> mv:CompareVersionsScript
                | <html><head></head><body><script>
                | function cmp (a, b) {
                |   let pa = a.split('.');
                |   let pb = b.split('.');
                |   for (let i = 0; i < Math.max(pa.length, pb.length); i++) {
                |       let na = Number(pa[i]);
                |       let nb = Number(pb[i]);
                |       if (isNaN(na)) na = 0;
                |       if (isNaN(nb)) nb = 0;
                |       if (na > nb) return "UpdateAvailable";
                |       if (nb > na) return "RollbackAvailable";
                |   }
                |   return "NoChanges";
                | };
                | let data = \(mv:SafeJSONData);
                | document.write(cmp(data.current, data.new));
                | </script></body></html>
                URL "data:text/html,\(mv:CompareVersionsScript)"
                GetContentsOfWebpage -> mv:UpdateStatus
                
                if ^mv:UpdateStatus Equals "NoChanges"
                    text "Up To Date (\(v:RSD.localVersion) = \(v:RSD.remoteVersion))"
                otherwise
                    if Equals "UpdateAvailable"
                        text "Update (\(v:RSD.localVersion) -> \(v:RSD.remoteVersion))"
                    otherwise
                        if Equals "RollbackAvailable"
                            text "Rollback (\(v:RSD.localVersion) -> \(v:RSD.remoteVersion))"
                        otherwise
                            ShowAlert title="Error" message="Error comparing versions on shortcut \(v:RSD.name). The local version is `\(v:RSD.localVersion)` and the remote version is `\(v:RSD.remoteVersion)`. The SafeJSONData is `\(mv:SafeJSONData). This should never happen. Please report this error to the routinehub page for Check For Updates.`"
                            ShowAlert "Press Cancel" "Press Cancel"
                            ShowAlert "Press Cancel" "Press Cancel"
                            ShowAlert "Press Cancel" "Press Cancel"
                            ShowAlert "Press Cancel" "Please press cancel so the shortcut will exit"
                            ShowAlert "Press Cancel" "It threw an error and it needs to be canceled"
                            ShowAlert "Press Cancel" "I can't cancel it from in the shortcut code because Exit Shortcut only exits the current shortcut not all of them"
                            ShowAlert "Press Cancel" "So you need to press cancel"
                            Repeat 100000
                                ShowAlert "Press Cancel" "Press Cancel"
                            end
                        end
                    end
                end -> mv:IfResult
                
                @:CreateCard{carddata: {name: v:RSD.name, description: mv:IfResult, note: v:RSD.name, photo: " "}}
                SetVariable v:CreatedCard
                
                // TODO!!
                // TODO: Get Icon
                // GetVariable mv:MyShortcuts
                // FilterFiles :filter{name is v:RSD.name}
                // GetImagesFromInput
                
                // NoChanges = up to date
                // UpdateAvailable = new version abailable
                // RollbackAvailable = rollback available
                
                if ^mv:UpdateStatus Equals "NoChanges"
                    // Add the shortcut to the ShortcutsUpToDate list.
                    AddToVariable ^v:CreatedCard v:ShortcutsUpToDate
                otherwise
                    // 1 or -1
                    AddToVariable ^v:CreatedCard v:ShortcutsNeedUpdating
                end
                
            otherwise
                AddToVariable ^(text "The shortcut \(v:RSD.name) is no longer installed.") v:WarningList
            end
        
        end
        Nothing
    end

    Dictionary{warnings:[],needUpdating:[],upToDate:[]}
    SetDictionaryValue warnings v:WarningList
    SetDictionaryValue needUpdating v:ShortcutsNeedUpdating
    SetDictionaryValue upToDate v:ShortcutsUpToDate
    ExitShortcut

otherwise
end

if Equals "RunCFU"
    
    List ["---"] -> v:WarningList
    
    // Upgrade old data
    Dictionary{action:"UpgradeOldCFUData"}
    RunShortcut mv:ThisShortcut false
    AddToVariable v:WarningList
    
    // Download shortcut remote data (very slow)
    Dictionary{action:"DownloadAllRemoteShortcutData"}
    RunShortcut mv:ThisShortcut false -> mv:DownloadedRemoteShortcutData
    AddToVariable ^(mv:DownloadedRemoteShortcutData.warnings) v:WarningList
    GetVariable mv:DownloadedRemoteShortcutData.result -> mv:RemoteShortcutData
    
    // Compare all versions and get back only a list of shortcuts that need upgrading/downgrading
    Dictionary{action:"CompareVersions",shortcutdata:[]}
    SetDictionaryValue shortcutdata mv:RemoteShortcutData
    RunShortcut mv:ThisShortcut false -> mv:VersionCompareResult
    AddToVariable ^(mv:VersionCompareResult.warnings) v:WarningList
    
    // Show all warnings
    GetVariable v:WarningList
    RepeatWithEach
        if Equals "---"
            Nothing
        otherwise
            If Contains "BEGIN:VCARD"
                SetName "a.vcf" -> mv:vCard
                GetVariable mv:vCard{as:Contact}
            Otherwise
            End
        end
    End -> v:WarningList
    Count Items
    If Equals 0
    Otherwise
        ShowResult
        | A few potential errors occured while checking your shortcuts for updates:
        | ---
        | \(CombineText ^(v:WarningList), Custom, (text "\n---\n"))
        | ---
    End
    
    List ["--Need Updating--"] -> v:ShortcutList
    AddToVariable ^mv:VersionCompareResult.needUpdating v:ShortcutList
    Text "--Up To Date--"
    AddToVariable v:ShortcutList
    AddToVariable ^mv:VersionCompareResult.upToDate v:ShortcutList
    
    Dictionary {action:"PickToUpdate",shortcutlist:[], remoteshortcutdata:[]}
    SetDictionaryValue shortcutlist v:ShortcutList
    SetDictionaryValue remoteshortcutdata mv:RemoteShortcutData
    RunShortcut mv:ThisShortcut false
    
    ExitShortcut
    
otherwise
end

if Equals "PickToUpdate"
    
    GetVariable v:Data.remoteshortcutdata -> v:RSD
    GetVariable v:Data.shortcutlist
    RepeatWithEach
        If Equals "---"; Nothing; Otherwise; End
    End
    ChooseFromList "Choose shortcut"
    ShowAlert title="Error" message="WIP"
    
otherwise
end

RunShortcut ^(Dictionary {action:"RunCFU"}) mv:ThisShortcut false






































































































