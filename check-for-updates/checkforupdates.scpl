getdictionaryfrominput -> mv:"Get Dictionary from Input"
setvariable Data

comment "Created by\n@pfg#4856\nhttps://routinehub.co/user/pfg\n/u/pfg___"

comment "Adding CFU support is easy and only takes 3 actions:"
CreateFolder "iCloud Drive" "CFU"
dictionary {Name: "Check For Updates", Version: "2.0", Service: "RoutineHub", ID: "793"} -> mv:Dictionary
savefile askwheretosave=false destinationpath="CFU/Check For Updates" overwriteiffileexists=true -> mv:"Save File"
comment
| That's it. 3 actions and you have cfu support.

comment
| This shortcut's code starts below.
| This shortcut was programmed in ScPL.
| Source code: https://github.com/pfgithub/my-shortcuts/blob/master/check-for-updates/checkforupdates.scpl

text "Check For Updates" -> mv:ThisShortcut


text "AutoUpdateData.json"
setvariable Filename
getvariable v:Data.action

// FROM iconlistv2

@set Escape (runShortcut mv:ThisShortcut false ^(Dictionary{ action: Escape, text: @:text }))
// @:Escape{text:hi}
// ————————————————————-----
// escapes a string for use in a vcard
if Equals "Escape"
    GetVariable v:Data.text
    replacetext "\\" "\\\\"
    replacetext (Text "\n") " "
    replacetext ";" "\\;"
    exitShortcut
otherwise
end


@set CreateCard (runShortcut mv:ThisShortcut false ^(Dictionary{ action: CreateCard, carddata: @:carddata }))
// runShortcut v:ThisShortcut false ^(Dictionary{ action: CreateCard, carddata: {name, description, note, photo?} })
// ————————————————————-----
// creates a text out of a dictionary containing card data
if Equals "CreateCard" 
    getVariable v:Data.carddata -> v:CardData

    if ^(Count "Characters" ^(v:CardData:photo)) "Equals" 1
        text ""
    otherwise
        text "PHOTO;ENCODING=b:\(v:CardData:photo)"
    end -> mv:Photo

    if ^(Count "Characters" ^(v:CardData:name)) "Equals" 0
        text "No Title"
    otherwise
        getVariable v:CardData:name
    end -> mv:Name

    text -> mv:Result
    | BEGIN:VCARD
    | VERSION:3.0
    | N;CHARSET=utf-8:\(@:Escape{text: mv:Name});;;
    | ORG;CHARSET=utf-8:\(@:Escape{text: v:CardData:description})
    | NOTE;CHARSET=utf-8:\(@:Escape{text: v:CardData:note})
    | \(mv:Photo)
    | END:VCARD

    // return as text
    exitShortcut ^(mv:Result)
otherwise
end

// END FROM

// todo the new cfu
// Dictionary {version, check: "RoutineHub", id: "1234"}

/*

Shortcuts/CFU contains:
[uniqueID: string]: {name: name, version: version}

*/


//
// {action:"GetLocalShortcutData"}
//   ->
// {id:name} // no "removed"
// Gets shortcut data and resaves it to the local file
if Equals "UpgradeOldCFUData"

    Dictionary{} -> v:ResDictionary
    List["---"] -> v:WarningList

    GetFile "iCloud Drive" false v:Filename false -> mv:LocalData
    GetDictionaryValue "All Keys"
    repeatwitheach
    
        GetVariable v:"Repeat Item" -> mv:Key
        GetVariable mv:LocalData
        GetDictionaryValue "Value" mv:Key -> mv:Value
        
        if ^mv:Value Equals "removed"
        otherwise
        
            // should be {name: name, version: version}
            GetVariable mv:Value.name
            if ^(Count Items) Equals 0
                GetVariable mv:Value.Name
            otherwise
                GetVariable mv:Value.name
            end -> mv:Name
            if ^(Count Items) Equals 0
                // Add Warning
                Text "A shortcut is missing its name in the cfu dictionary. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0'}"
                AddToVariable v:WarningList
            otherwise
                GetVariable mv:Value.version
                if ^(Count Items) Equals 0
                    GetVariable mv:Value.Version
                otherwise
                    GetVariable mv:Value.version
                end -> mv:Version
                if ^(Count Items) Equals 0
                    // Add Warning
                    Text "The shortcut `\(mv:Name)` is missing its version in the cfu dictionary. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0'}"
                    AddToVariable v:WarningList
                otherwise
                    Dictionary{name: mv:Name, version: mv:Version, check: "RoutineHub", id: mv:Key}
                    SaveFile "iCloud Drive" false "CFU/\(mv:Name)" true
                end
            end
            
        end
        Nothing
    end
    
    // Remove old data
    Dictionary{"Deleting":"..."}
    SaveFile "iCloud Drive" false v:Filename true
    DeleteFiles confirmbeforedeleting=false
    
    ExitShortcut ^(v:WarningList)
    
otherwise
end

// {action: "DownloadRemoteShortcutData" uniqueid:, localdata:}
// -> 
// {result: "error", message: string}
// | {result: "success", remoteVersion, localVersion, uniqueID, name, description: "", directDownloadURL: ""}
if Equals "DownloadRemoteShortcutData"

    GetVariable v:Data.uniqueid -> mv:UniqueID
    GetVariable v:Data.localdata -> mv:Value

    // validate shortcut data
    GetVariable mv:Value.name
    if ^(Count Items) Equals 0
        GetVariable mv:Value.Name
    otherwise
        GetVariable mv:Value.name
    end -> mv:Name
    if ^(Count Items) Equals 0
        // Add Warning
        Dictionary{ result: error, message: "The shortcut with the id `\(mv:UniqueID)` is missing its name in its cfu file. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0'}" }
        ExitShortcut
    otherwise
    end
    GetVariable mv:Value.version
    if ^(Count Items) Equals 0
        GetVariable mv:Value.Version
    otherwise
        GetVariable mv:Value.version
    end -> mv:Version
    if ^(Count Items) Equals 0
        // Add Warning
        Dictionary{ result: "error", message: "The shortcut `\(mv:Name)` (`\(mv:UniqueID)`) is missing its version in its cfu file. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0'}" }
        ExitShortcut
    otherwise
    end
    GetVariable mv:Value.check
    if ^(Count Items) Equals 0
        GetVariable mv:Value.Check
        if ^(Count Items) Equals 0
            GetVariable mv:Value.service
            if ^(Count Items) Equals 0
                GetVariable mv:Value.Service
            otherwise
                GetVariable mv:Value.service
            end
        otherwise
            GetVariable mv:Value.Check
        end
    otherwise
        GetVariable mv:Value.check
    end -> v:Service
    if ^(Count Items) Equals 0
        // Add Warning
        Dictionary{ result: "error", message: "The shortcut `\(mv:Name)` (`\(mv:UniqueID)`) is missing its service in its cfu file. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0', Service: see docs for list}" }
        ExitShortcut
    otherwise
    end
    
    // Download data from web
    GetVariable v:Service
    MatchText "routine\\s*hub" casesensitive=false
    if ^(Count Items) Equals 0
    otherwise
        GetVariable mv:Value.id
        if ^(Count Items) Equals 0
            GetVariable mv:Value.ID
        otherwise
            GetVariable mv:Value.id
        end -> mv:ID
        if ^(Count Items) Equals 0
            // Add Warning
            Dictionary{ result: error, message: "The shortcut `\(mv:Name)` (`\(mv:UniqueID)`) is missing its routinehub id in its cfu file. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0', Service: 'RoutineHub', ID: '1234'}" }
            ExitShortcut
        otherwise
        end
        URL "https://routinehub.co/api/v1/shortcuts/\(mv:ID)/versions/latest"
        GetContentsOfURL -> mv:WebData
        GetVariable mv:WebData.result
        if Equals "success"
            // return version, notes, and download url
            Dictionary{
                result: success,
                remoteVersion: mv:WebData.Version,
                localVersion: mv:Version,
                uniqueID: mv:UniqueID,
                name: mv:Name,
                description: mv:WebData.Notes,
                directDownloadURL: "https://routinehub.co/download/\(mv:WebData.id)"
            }
            ExitShortcut
        otherwise
            Dictionary{ result: error, message: "The shortcut `\(mv:Name)` (routinehub `\(mv:ID)`) could not be checked for updates because of a routinehub error: \(mv:WebData.message)" }
            ExitShortcut
        end
    end
    
    Dictionary{ result: error, message: "The shortcut `\(mv:Name)` (`\(mv:UniqueID)`) uses a service which does not exist or is not supported yet. It uses `\(v:Service) but only `RoutineHub` is supported right now.`" }
    ExitShortcut
    
    /*
    GetVariable v:Service
    MatchText "url" casesensitive=false
    if ^(Count Items) Equals 0
    otherwise
        GetVariable mv:Value.jsonpath
        if ^(Count Items) Equals 0
            GetVariable mv:Value.JsonPath
        otherwise
            GetVariable mv:Value.jsonpath
        end -> v:JsonPath
        
        GetVariable mv:Value.url
        if ^(Count Items) Equals 0
            GetVariable mv:Value.URL
        otherwise
            GetVariable mv:Value.url
        end -> v:URL
    end
    */
otherwise
end

//
// {action: "DownloadAllRemoteShortcutData"}
//    ->
// [{version, description, directDownloadURL}]
// Downloads shortcut data off their download pages
// and save to CFU/__cache
if Equals "DownloadAllRemoteShortcutData"
    
    List ["---"] -> v:WarningList
    List ["---"] -> v:Result
    GetFile "iCloud Drive" false "CFU" false -> mv:InstalledShortcuts
    
    repeatwitheach ^(mv:InstalledShortcuts)
    
        GetName ^(v:"Repeat Item") -> mv:UniqueID
        GetDictionaryFromInput ^(v:"Repeat Item") -> mv:Value
        
        Dictionary {action: DownloadRemoteShortcutData, uniqueid: mv:UniqueID, localdata: mv:Value}
        RunShortcut mv:ThisShortcut false -> mv:RemoteShortcutData
        
        if ^(mv:RemoteShortcutData.result) Equals "error"
        
            // Add warning
            AddToVariable ^(mv:RemoteShortcutData.message) v:WarningList
            
        otherwise
        
            // Add to result
            AddToVariable ^(mv:RemoteShortcutData) v:Result
        
        end

    end
    
    Dictionary{warnings: [], result: []}
    SetDictionaryValue warnings v:WarningList
    SetDictionaryValue result v:Result
    ExitShortcut
    
otherwise
end

// make sure all shortcuts are installed and up to date and gives them an icon for the menu and make vcards out of them
// {action: "CompareVersions", shortcutdata: remoteShortcutData[]}
if Equals "CompareVersions"

    GetMyShortcuts -> mv:MyShortcuts // may take a long time

    List ["---"] -> v:WarningList
    List ["---"] -> v:ShortcutsNeedUpdating
    List ["---"] -> v:ShortcutsUpToDate
    
    repeatwitheach ^(v:Data.shortcutdata)
        if "Equals" "---"
        otherwise
        
            GetVariable v:"Repeat Item" -> v:RSD
        
            // check if installed
            if ^mv:MyShortcuts "Equals" v:RSD.name
                
                // is installed
                // compare version numbers
                
                // data will always be strings inside of a dictionary string value
                // and as such the data *should* be safe
                Dictionary{current: v:RSD.localVersion, new: v:RSD.remoteVersion} -> mv:SafeJSONData
                
                // TODO future: compare all at once rather than one at a time
                Text -> mv:CompareVersionsScript
                | <html><head></head><body><script>
                | function cmp (a, b) {
                |   let pa = a.split('.');
                |   let pb = b.split('.');
                |   for (let i = 0; i < Math.max(pa.length, pb.length); i++) {
                |       let na = Number(pa[i]);
                |       let nb = Number(pb[i]);
                |       if (isNaN(na)) na = 0;
                |       if (isNaN(nb)) nb = 0;
                |       if (na > nb) return "UpdateAvailable";
                |       if (nb > na) return "RollbackAvailable";
                |   }
                |   return "NoChanges";
                | };
                | let data = \(mv:SafeJSONData);
                | document.write(cmp(data.current, data.new));
                | </script></body></html>
                URL "data:text/html,\(mv:CompareVersionsScript)"
                GetContentsOfWebpage -> mv:UpdateStatus
                
                if ^mv:UpdateStatus Equals "NoChanges"
                    text "Up To Date (\(v:RSD.localVersion) = \(v:RSD.remoteVersion))"
                otherwise
                    if Equals "UpdateAvailable"
                        text "Update (\(v:RSD.localVersion) → \(v:RSD.remoteVersion))"
                    otherwise
                        if Equals "RollbackAvailable"
                            text "Rollback (\(v:RSD.localVersion) ↘ \(v:RSD.remoteVersion))"
                        otherwise
                            ShowAlert title="Error" message="Error comparing versions on shortcut \(v:RSD.name). The local version is `\(v:RSD.localVersion)` and the remote version is `\(v:RSD.remoteVersion)`. The SafeJSONData is `\(mv:SafeJSONData). This should never happen. Please report this error to the routinehub page for Check For Updates.`"
                            ShowAlert "Press Cancel" "Press Cancel"
                        end
                    end
                end -> mv:IfResult
                
                GetVariable mv:MyShortcuts
                Comment "FilterFiles :filter{name is v:RSD.name}"
                GetImagesFromInput
                ResizeImage 123
                Base64Encode Encode None -> mv:Base64Encoded
                @:CreateCard{carddata: {name: v:RSD.name, description: mv:IfResult, note: v:RSD.name, photo: mv:Base64Encoded}}
                SetVariable v:CreatedCard
                
                // NoChanges = up to date
                // UpdateAvailable = new version abailable
                // RollbackAvailable = rollback available
                
                if ^mv:UpdateStatus Equals "NoChanges"
                    // Add the shortcut to the ShortcutsUpToDate list.
                    AddToVariable ^v:CreatedCard v:ShortcutsUpToDate
                otherwise
                    // 1 or -1
                    AddToVariable ^v:CreatedCard v:ShortcutsNeedUpdating
                end
                
            otherwise
                AddToVariable ^(text "The shortcut \(v:RSD.name) is no longer installed.") v:WarningList
                Dictionary{"Deleting":"..."}
                SaveFile "iCloud Drive" false "CFU/\(v:RSD.name)" true
                DeleteFiles false
            end
        
        end
        Nothing
    end

    Dictionary{warnings:[],needUpdating:[],upToDate:[]}
    SetDictionaryValue warnings v:WarningList
    SetDictionaryValue needUpdating v:ShortcutsNeedUpdating
    SetDictionaryValue upToDate v:ShortcutsUpToDate
    ExitShortcut

otherwise
end

if Equals "RunCFU"
    
    List ["---"] -> v:WarningList
    
    // Upgrade old data
    Dictionary{action:"UpgradeOldCFUData"}
    RunShortcut mv:ThisShortcut false
    AddToVariable v:WarningList

    ChooseFromMenu ""
    | Check for updates on \(Count ^(GetFile "iCloud Drive" false "CFU" false) Items) shortcuts
    Case
    End
    
    // Download shortcut remote data (very slow)
    Dictionary{action:"DownloadAllRemoteShortcutData"}
    RunShortcut mv:ThisShortcut false -> mv:DownloadedRemoteShortcutData
    AddToVariable ^(mv:DownloadedRemoteShortcutData.warnings) v:WarningList
    GetVariable mv:DownloadedRemoteShortcutData.result -> mv:RemoteShortcutData
    
    // Compare all versions and get back only a list of shortcuts that need upgrading/downgrading
    Dictionary{action:"CompareVersions",shortcutdata:[]}
    SetDictionaryValue shortcutdata mv:RemoteShortcutData
    RunShortcut mv:ThisShortcut false -> mv:VersionCompareResult
    AddToVariable ^(mv:VersionCompareResult.warnings) v:WarningList
    
    // Show all warnings
    GetVariable v:WarningList
    RepeatWithEach
        if Equals "---"
            Nothing
        otherwise
            If Contains "BEGIN:VCARD"
                SetName "a.vcf" -> mv:vCard
                GetVariable mv:vCard{as:Contact}
            Otherwise
            End
        end
    End -> v:WarningList
    Count Items
    If Equals 0
    Otherwise
        ShowResult
        | A few potential errors occured while checking your shortcuts for updates:
        | ---
        | \(CombineText ^(v:WarningList), Custom, (text "\n---\n"))
        | ---
    End
    
    List ["---"] -> v:ShortcutList
    @:CreateCard{carddata: {name: "Need Updating", description: "", note: "---", photo: " "}}
    AddToVariable v:ShortcutList
    AddToVariable ^mv:VersionCompareResult.needUpdating v:ShortcutList
    @:CreateCard{carddata: {name: "Up To Date", description: "", note: "---", photo: " "}}
    AddToVariable v:ShortcutList
    AddToVariable ^mv:VersionCompareResult.upToDate v:ShortcutList
    
    Dictionary{} -> v:RemoteShortcutDataDictionary
    GetVariable mv:RemoteShortcutData
    RepeatWithEach
        If Equals "---"
        Otherwise
            SetVariable v:RSD
            GetVariable v:RemoteShortcutDataDictionary
            SetDictionaryValue v:RSD.name v:RSD
            SetVariable v:RemoteShortcutDataDictionary
            Nothing
        End
    End
    
    Dictionary {action:"PickToUpdate",shortcutlist:[], remoteshortcutdata:{}}
    SetDictionaryValue shortcutlist v:ShortcutList
    SetDictionaryValue remoteshortcutdata v:RemoteShortcutDataDictionary
    RunShortcut mv:ThisShortcut false
    
    ExitShortcut
    
otherwise
end

if Equals "PickToUpdate"
    
    GetVariable v:Data.remoteshortcutdata -> v:RemoteShortcutData
    GetVariable v:Data.shortcutlist
    RepeatWithEach
        If Equals "---"
            Nothing
        Otherwise
            SetName "c.vcf" -> mv:vCard
            GetVariable mv:vCard{as: Contact}
        End
    End
    ChooseFromList "Choose shortcut" -> mv:ChosenShortcutContact
    
    GetVariable mv:ChosenShortcutContact{as:Contact,get:Notes} -> mv:ChosenShortcutName
    If Equals "---"
    Otherwise
        GetVariable v:RemoteShortcutData
        GetDictionaryValue Value mv:ChosenShortcutName -> v:RSD
        GetVariable mv:ChosenShortcutContact{as:Contact,get:ContactPhoto}
        Base64Encode -> mv:Photo
        
        Dictionary{
            "action": "AskToUpdateOneShortcut"
            "photo": mv:Photo,
            "rsd": {},
            "description": mv:ChosenShortcutContact{as:Contact,get:Company}
        }
        SetDictionaryValue rsd v:RSD
        RunShortcut mv:ThisShortcut false
        If Equals "done"
            ExitShortcut
        Otherwise
        End

    End
    
    Dictionary {action:"PickToUpdate",shortcutlist:[], remoteshortcutdata:{}}
    SetDictionaryValue shortcutlist v:Data.shortcutlist
    SetDictionaryValue remoteshortcutdata v:RemoteShortcutData
    RunShortcut mv:ThisShortcut false
    
otherwise
end

if Equals "AskToUpdateOneShortcut"
    GetVariable v:Data.photo -> mv:Base64Encoded
    GetVariable v:Data.rsd -> v:RSD
    Text -> mv:Style
    | html{height:100%}body{display:grid;grid-template-columns:1fr minmax(0,1000px) 1fr;
    | background-color:#add8e6;margin:0;height:100%}.content{grid-column:2;background-color:#fff;
    | padding:10px;margin:10px;border-radius:10px;box-shadow:5px 5px 50px rgba(0,0,0,.3)}
    | .title{display:grid;grid-template-columns:min-content 1fr}.img{margin:10px;box-shadow:1px 1px 5px rgba(0,0,0,.3);
    | border-radius:10px}.titletext{padding:10px;font-weight:700;font-size:24pt;font-family:sans-serif}
    | .newinversion{background-image:linear-gradient(to top,#2d913e,#2a993d);border-radius:1000px;display:inline;
    | box-shadow:1px 1px 5px rgba(0,0,0,.3);padding:4px;padding-left:0}.nivversion{background-image:
    | linear-gradient(#6fed84,#4cd964)}.nivtext{padding:4px;border-radius:1000px;padding-left:12px;padding-right:12px;
    | display:inline;font-family:sans-serif}.nivdonetext{color:#fff}.description{word-wrap:break-word}
    Text
    | <!DOCTYPE html>
    | <html>
    |  <head>
    |   <meta name="viewport" content="width=device-width, initial-scale=1">
    |   <meta charset="utf-8">
    |   <style>\(mv:Style)</style>
    |  </head>
    |  <body>
    |   <div class="content">
    |    <div class="title"><img class="img" width="100" height="100" src="data:image/png;base64,\(mv:Base64Encoded)" />
    |        <div>
    |            <div class="titletext">\(v:RSD.name)</div>
    |        </div>
    |    </div>
    |    <div class="description">
    |            <div class="newinversion">
    |                <div class="nivtext nivversion">\(v:RSD.localVersion) -> \(v:RSD.remoteVersion)</div>
    |                <div class="nivdonetext nivtext">Press Done to get</div>
    |            </div>
    |        \(MakeHTMLFromRichText ^(MakeRichTextFromMarkdown ^(Text "\(v:RSD.description)")))
    |    </div>
    |   </div>
    |  </body>
    | </html>
    
    MakeRichTextFromHTML
    ShowWebpage
    ChooseFromMenu "\(v:RSD.description)"
    | \(v:Data.description)
    | < Back
    Case Upgrade
        Dictionary{"Deleting":"..."}
        SaveFile "iCloud Drive" false "CFU/\(v:RSD.name)" true
        DeleteFiles false
        OpenURLs ^v:RSD.directDownloadURL
        Text "done"
        ExitShortcut
    Case Back
    End
    
    Nothing
    ExitShortcut
otherwise
end

RunShortcut ^(Dictionary {action:"RunCFU"}) mv:ThisShortcut false






































































































