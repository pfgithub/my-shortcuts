getdictionaryfrominput -> mv:"Get Dictionary from Input"
setvariable Data

comment "Created by\n@pfg#4856\nhttps://routinehub.co/user/pfg\n/u/pfg___"

CreateFolder "iCloud Drive" "CFU"

text "Check For Updates" -> mv:ThisShortcut

dictionary {name: mv:ThisShortcut, version: "1.6.1"} -> mv:Dictionary
getfile showdocumentpicker=false filepath="AutoUpdateData.json" errorifnotfound=false -> mv:"Get File"
setdictionaryvalue key=793 value=mv:Dictionary -> mv:"Set Dictionary Value"
savefile askwheretosave=false destinationpath="AutoUpdateData.json" overwriteiffileexists=true -> mv:"Save File"
comment "Usage:\n\nDictionary(name=shortcut name,version=version)\n\nGet File /Shortcuts/AutoUpdateData.json\n\nSet Dictionary Value (routinehub id, (dictionary magic var))\n\nSave File /Shortcuts/AutoUpdateData.json\n\naction: Compare Versions\ncurrent: current version number\nnew: new version number\nresult: Up to date|New version available\n\naction: Split Decimals\nversion: version number\noutput: {number: first number, next: next version number}\n\n"
text "AutoUpdateData.json"
setvariable Filename
getvariable v:Data.action
if input=Equals value="Compare Versions"
	getvariable v:Data.current
	count Characters -> mv:Count
	if input=Equals value=0
		getvariable v:Data.new
		count Characters -> mv:Count1
		if input=Equals value=0
			text "Up to date" -> mv:Text
			exitshortcut
		otherwise
		end
	otherwise
	end
	dictionary {version: v:Data.current, action: "Split Decimals"} -> mv:Dictionary1
	runshortcut shortcut="Check For Updates" showwhilerunning=false -> mv:"Run Shortcut"
	dictionary {action: "Split Decimals", version: v:Data.new} -> mv:Dictionary2
	runshortcut shortcut="Check For Updates" showwhilerunning=false -> mv:"Run Shortcut1"
	getdictionaryvalue key=number -> mv:"Get Dictionary Value"
	if input="Is Greater Than" number=mv:"Run Shortcut".number
		text "New version available" -> mv:Text1
		exitshortcut
	otherwise
		if input="Is Less Than" number=mv:"Run Shortcut".number
			text "Up to date" -> mv:Text2
			exitshortcut
		otherwise
			dictionary {action: "Compare Versions", current: mv:"Run Shortcut".next, new: mv:"Run Shortcut1".next} -> mv:Dictionary3
			runshortcut shortcut="Check For Updates" showwhilerunning=false -> mv:"Run Shortcut2"
			exitshortcut
		end
	end
	text "Up to date"
	exitshortcut
otherwise
end
if input=Equals value="Split Decimals"
	getvariable v:Data.version
	matchtext pattern="^([0-9]+).?" -> mv:"Match Text"
	getgroupfrommatchedtext -> mv:"Get Group from Matched Text"
	count Items -> mv:Count2
	if input=Equals value=0
		number 0 -> mv:Number
	otherwise
		number mv:"Get Group from Matched Text" -> mv:Number1
	end -> mv:If4
	getvariable v:Data.version
	replacetext findtext="^([0-9]+).?" regularexpression=true -> mv:"Replace Text"
	dictionary {number: mv:If4, next: mv:"Replace Text"} -> mv:Dictionary4
	exitshortcut
otherwise
end
if input=Equals value="Pick Shortcut To Update"
	getvariable v:Data.list
	getdictionaryfrominput -> mv:"Get Dictionary from Input1"
	getdictionaryvalue get="All Keys" -> mv:"Get Dictionary Value1"
	repeatwitheach
		getvariable v:Data.list
		getdictionaryvalue key=v:"Repeat Item" -> mv:"Get Dictionary Value2"
		getdictionaryfrominput -> mv:"Get Dictionary from Input2"
		setvariable Scut
		getdictionaryvalue key=data -> mv:"Get Dictionary Value3"
		setvariable WebData
		getvariable v:Scut.saved
		setvariable LocalData
		comment "id data icon saved name\n\ndata Version\nsaved version\n\n"
		text "BEGIN:VCARD\nVERSION:3.0\nN:;\(v:Scut.name);;;\nORG:\(v:LocalData.version) -> \(v:WebData.Version);\nPHOTO;ENCODING=b: \(v:Scut.icon)\nEND:VCARD" -> mv:Text4
	end -> mv:"Repeat with Each"
	combinetext separator="New Lines" -> mv:"Combine Text"
	text "\(mv:"Combine Text")\n\nBEGIN:VCARD\nVERSION:3.0\nN;CHARSET=utf-8:Don't Update;;;\nORG;CHARSET=utf-8:;;;\nURL:;\nPHOTO;ENCODING=b: iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAB50lEQVR42u2ZtY6jQRAGz+kxM4LpqY4RomNmZsa3Ol4miJdibwUdtEZmmLZHXVJJTuuz/eOSpnAcx3Ecx3Ecx3GcVWJMMrhGNGUbnsQLmIsYn8fLeAq3oAmr8TT+xwl8jrlI8S9xCv/hUVyO0VmDF3ESS3qESPElHMTTNgOAxD4rN0KE+CG8iTtRYz7CpIyQb2N8Dl8E8bd0fAIjNBy/C8tjPMJEOEIb44fD+BRH0PHPcVLF39bxvTTCS8ynH9/gCA3E38HdKKQ5Qgaz+Mwg3nyEcvEjeFfie5psMMKUjFBIOr6BEbL4FCdU/D3cg0K6I/zA73bx9iPM44J8HsX7KcfrEb7iHJbEOfyEezF5svilzADfsYBJsx+f4LiEz6ohpvAVFlKOf6zix/ATfgkOjK9lhOTjH+E+zOLTlEfYh4/KxgtVRiimFj+Oj3W8/Qj28eEIT1IYYR8+xLEgfj8KdY8wrUfo1fgnOr7FETLYtezFB0H80yC+0RHGTUdoQ3wWhbaM8EaP0K3xE2F8yiPsxfs4quKf6XjTEQzin2M2wn3ENL61HGEZnsGRSC9Hy40whVdwjdUAB/EXTqr4WPcVo/gLj+FqNGETHsdLOj7SCOfwIG5EU1Yb/QSXi47jOI7jOI7jOI7TIIvCXf7hdvLDDQAAAABJRU5ErkJggg==\nEND:VCARD"
	setname name="\(v:Scut.name).vcf" -> mv:"Set Name"
	setvariable __temp
	getvariable v:__temp{as: contact}
	choosefromlist prompt="Shortcuts with available updates:" -> mv:"Choose from List"
	if input=Equals value="Don't Update"
		nothing
		exitshortcut
	otherwise
	end
	getvariable mv:"Get Dictionary from Input1"
	getdictionaryvalue key=mv:"Choose from List"
	getdictionaryfrominput -> mv:"Get Dictionary from Input3"
	setvariable ShortcutToUpdate
	getdictionaryvalue key=data -> mv:"Get Dictionary Value4"
	text "Update for \(v:ShortcutToUpdate.name):\nVersion \(mv:"Get Dictionary Value4".Version)\n\n\(mv:"Get Dictionary Value4".Notes)" -> mv:Text5
	choosefrommenu prompt=mv:Text5 items=[Update, "I no longer have this shortcut", Back]
	case
		getvariable v:ShortcutToUpdate
		exitshortcut
	case
		getfile showdocumentpicker=false filepath=v:Filename errorifnotfound=false -> mv:"Get File1"
		setdictionaryvalue key=v:ShortcutToUpdate.id value=removed -> mv:"Set Dictionary Value1"
		savefile askwheretosave=false destinationpath=v:Filename overwriteiffileexists=true -> mv:"Save File1"
		showresult "This shortcut will no longer be checked for updates unless you run it again."
		exitshortcut
	case
	end -> mv:"Choose from Menu"
	getvariable v:Data
	runshortcut shortcut="Check For Updates" showwhilerunning=false -> mv:"Run Shortcut3"
	exitshortcut
otherwise
end
if input=Equals value="List Updatable Shortcuts"
	dictionary -> mv:Dictionary5
	setvariable PickToUpdate
	getvariable v:Data.list
	repeatwitheach
		if input=Equals value=removed
		otherwise
			text v:"Repeat Item"
			getdictionaryfrominput
			getdictionaryvalue key=name -> mv:saved
			getvariable v:PickToUpdate
			setdictionaryvalue key=v:"Repeat Item".name value=v:"Repeat Item" -> mv:"Set Dictionary Value2"
			setvariable PickToUpdate
		end
	end -> mv:"Repeat with Each1"
	getvariable v:PickToUpdate
	exitshortcut
otherwise
end

// todo the new cfu
// Dictionary {version, check: "RoutineHub", id: "1234"}

/*

Shortcuts/CFU contains:
[uniqueID: string]: {name: name, version: version}

*/


//
// {action:"GetLocalShortcutData"}
//   ->
// {id:name} // no "removed"
// Gets shortcut data and resaves it to the local file
if Equals "UpgradeOldCFUData"

    Dictionary{} -> v:ResDictionary
    List["---"] -> v:WarningList

    GetFile "iCloud Drive" false v:Filename false -> mv:LocalData
    GetDictionaryValue "All Keys"
    repeatwitheach
    
        GetVariable v:"Repeat Item" -> mv:Key
        GetVariable mv:LocalData
        GetDictionaryValue "Value" mv:Key -> mv:Value
        
        if ^mv:Value Equals "removed"
        otherwise
        
            // should be {name: name, version: version}
            GetVariable mv:Value.name
            if ^(Count Items) Equals 0
                GetVariable mv:Value.Name
            otherwise
                GetVariable mv:Value.name
            end -> mv:Name
            if ^(Count Items) Equals 0
                // Add Warning
                Text "A shortcut is missing its name in the cfu dictionary. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0'}"
                AddToVariable v:WarningList
            otherwise
                GetVariable mv:Value.version
                if ^(Count Items) Equals 0
                    GetVariable mv:Value.Version
                otherwise
                    GetVariable mv:Value.version
                end -> mv:Version
                if ^(Count Items) Equals 0
                    // Add Warning
                    Text "The shortcut `\(mv:Name)` is missing its version in the cfu dictionary. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0'}"
                    AddToVariable v:WarningList
                otherwise
                    Dictionary{name: mv:Name, version: mv:Version, check: "RoutineHub", id: mv:Key}
                    SaveFile "iCloud Drive" false "CFU/\(mv:Name)" true
                end
            end
            
        end
        Nothing
    end
    
    // Remove old data
    GetVariable mv:LocalData
    DeleteFiles confirmbeforedeleting=false
    
    ExitShortcut ^(v:WarningList)
    
otherwise
end

// {action: "DownloadRemoteShortcutData" uniqueid:, localdata:}
// -> 
// {result: "error", message: string}
// | {result: "success", remoteVersion, localVersion, uniqueID, name, description: "", directDownloadURL: ""}
if Equals "DownloadRemoteShortcutData"

    GetVariable v:Data.uniqueid -> mv:UniqueID
    GetVariable v:Data.localdata -> mv:Value

    // validate shortcut data
    GetVariable mv:Value.name
    if ^(Count Items) Equals 0
        GetVariable mv:Value.Name
    otherwise
        GetVariable mv:Value.name
    end -> mv:Name
    if ^(Count Items) Equals 0
        // Add Warning
        Dictionary{ result: error, message: "The shortcut with the id `\(mv:UniqueID)` is missing its name in its cfu file. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0'}" }
        ExitShortcut
    otherwise
    end
    GetVariable mv:Value.version
    if ^(Count Items) Equals 0
        GetVariable mv:Value.Version
    otherwise
        GetVariable mv:Value.version
    end -> mv:Version
    if ^(Count Items) Equals 0
        // Add Warning
        Dictionary{ result: "error", message: "The shortcut `\(mv:Name)` (`\(mv:UniqueID)`) is missing its version in its cfu file. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0'}" }
        ExitShortcut
    otherwise
    end
    GetVariable mv:Value.check
    if ^(Count Items) Equals 0
        GetVariable mv:Value.Check
        if ^(Count Items) Equals 0
            GetVariable mv:Value.service
            if ^(Count Items) Equals 0
                GetVariable mv:Value.Service
            otherwise
                GetVariable mv:Value.service
            end
        otherwise
            GetVariable mv:Value.Check
        end
    otherwise
        GetVariable mv:Value.check
    end -> v:Service
    if ^(Count Items) Equals 0
        // Add Warning
        Dictionary{ result: "error", message: "The shortcut `\(mv:Name)` (`\(mv:UniqueID)`) is missing its service in its cfu file. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0', Service: see docs for list}" }
        ExitShortcut
    otherwise
    end
    
    // Download data from web
    GetVariable v:Service
    MatchText "routine\\s*hub" casesensitive=false
    if ^(Count Items) Equals 0
    otherwise
        GetVariable mv:Value.id
        if ^(Count Items) Equals 0
            GetVariable mv:Value.ID
        otherwise
            GetVariable mv:Value.id
        end -> mv:ID
        if ^(Count Items) Equals 0
            // Add Warning
            Dictionary{ result: error, message: "The shortcut `\(mv:Name)` (`\(mv:UniqueID)`) is missing its routinehub id in its cfu file. Their data is: `\(mv:Value)`. If you are the author of this shortcut, make sure your data follows the format {Name: 'name', Version: '1.0.0', Service: 'RoutineHub', ID: '1234'}" }
            ExitShortcut
        otherwise
        end
        URL "https://routinehub.co/api/v1/shortcuts/\(mv:ID)/versions/latest"
        GetContentsOfURL -> mv:WebData
        GetVariable mv:WebData.result
        if Equals "success"
            // return version, notes, and download url
            Dictionary{
                result: success,
                remoteVersion: mv:WebData.Version,
                localVersion: mv:Version,
                uniqueID: mv:UniqueID,
                name: mv:Name,
                description: mv:WebData.Notes,
                directDownloadURL: "https://routinehub.co/download/\(mv:WebData.id)"
            }
            ExitShortcut
        otherwise
            Dictionary{ result: error, message: "The shortcut `\(mv:Name)` (routinehub `\(mv:ID)`) could not be checked for updates because of a routinehub error: \(mv:WebData.message)" }
            ExitShortcut
        end
    end
    
    Dictionary{ result: error, message: "The shortcut `\(mv:Name)` (`\(mv:UniqueID)`) uses a service which does not exist or is not supported yet. It uses `\(v:Service) but only `RoutineHub` is supported right now.`" }
    ExitShortcut
    
    /*
    GetVariable v:Service
    MatchText "url" casesensitive=false
    if ^(Count Items) Equals 0
    otherwise
        GetVariable mv:Value.jsonpath
        if ^(Count Items) Equals 0
            GetVariable mv:Value.JsonPath
        otherwise
            GetVariable mv:Value.jsonpath
        end -> v:JsonPath
        
        GetVariable mv:Value.url
        if ^(Count Items) Equals 0
            GetVariable mv:Value.URL
        otherwise
            GetVariable mv:Value.url
        end -> v:URL
    end
    */
otherwise
end

//
// {action: "DownloadAllRemoteShortcutData"}
//    ->
// [{version, description, directDownloadURL}]
// Downloads shortcut data off their download pages
// and save to CFU/__cache
if Equals "DownloadAllRemoteShortcutData"
    
    List ["---"] -> v:WarningList
    List ["---"] -> v:Result
    GetFile "iCloud Drive" false "CFU" false -> mv:InstalledShortcuts
    
    repeatwitheach ^(mv:InstalledShortcuts)
    
        GetName ^(v:"Repeat Item") -> mv:UniqueID
        GetDictionaryFromInput ^(v:"Repeat Item") -> mv:Value
        
        Dictionary {action: DownloadRemoteShortcutData, uniqueid: mv:UniqueID, localdata: mv:Value}
        RunShortcut mv:ThisShortcut false -> mv:RemoteShortcutData
        
        if ^(mv:RemoteShortcutData.result) Equals "error"
        
            // Add warning
            AddToVariable ^(mv:RemoteShortcutData.message) v:WarningList
            
        otherwise
        
            // Add to result
            AddToVariable ^(mv:RemoteShortcutData) v:Result
        
        end

    end
    
    Dictionary{warnings: [], result: []}
    SetDictionaryValue warnings v:WarningList
    SetDictionaryValue result v:Result
    ExitShortcut
    
otherwise
end

// make sure all shortcuts are installed and up to date and gives them an icon for the menu and make vcards out of them
// {action: "CompareVersions", shortcutdata: remoteShortcutData[]}
if Equals "CompareVersions"

    GetMyShortcuts -> mv:MyShortcuts // may take a long time

    List ["---"] -> v:WarningList
    List ["---"] -> v:ShortcutsNeedUpdating
    List ["---"] -> v:ShortcutsUpToDate
    
    repeatwitheach ^(v:Data.shortcutdata)
        if "Equals" "---"
        otherwise
        
            GetVariable v:"Repeat Item" -> v:RSD
        
            // check if installed
            if ^mv:MyShortcuts "Equals" v:RSD.name
                
                // is installed
                // compare version numbers
                
                // data will always be strings inside of a dictionary string value
                // and as such the data *should* be safe
                Dictionary{current: v:RSD.localVersion, new: v:RSD.remoteVersion} -> mv:SafeJSONData
                
                // TODO future: compare all at once rather than one at a time
                Text -> mv:CompareVersionsScript
                | <html><head></head><body><script>
                | function cmp (a, b) {
                |   let pa = a.split('.');
                |   let pb = b.split('.');
                |   for (let i = 0; i < Math.max(pa.length, pb.length); i++) {
                |       let na = Number(pa[i]);
                |       let nb = Number(pb[i]);
                |       if (isNaN(na)) na = 0;
                |       if (isNaN(nb)) nb = 0;
                |       if (na > nb) return "UpdateAvailable";
                |       if (nb > na) return "RollbackAvailable";
                |   }
                |   return "NoChanges";
                | };
                | let data = \(mv:SafeJSONData);
                | document.write(cmp(data.new, data.current));
                | </script></body></html>
                URL "data:text/html,\(mv:CompareVersionsScript)"
                GetContentsOfWebpage -> mv:UpdateStatus
                
                if ^mv:UpdateStatus Equals "NoChanges"
                    text "Up To Date (\(v:RSD.localVersion) = \(v:RSD.remoteVersion))"
                otherwise
                    if Equals "UpdateAvailable"
                        text "Update (\(v:RSD.localVersion) -> \(v:RSD.remoteVersion))"
                    otherwise
                        if Equals "RollbackAvailable"
                            text "Rollback (\(v:RSD.localVersion) -> \(v:RSD.remoteVersion))"
                        otherwise
                            text "Error comparing versions on shortcut \(v:RSD.name). The local version is `\(v:RSD.localVersion)` and the remote version is `\(v:RSD.remoteVersion)`. The SafeJSONData is `\(mv:SafeJSONData). This should never happen. Please report this error to the routinehub page for Check For Updates.`"
                            AddToVariable v:WarningList
                        end
                    end
                end
                
                // TODO!!
                // filterfiles ^mv:MyShortcuts name=(name)
                // getimagesfrominput
                
                // NoChanges = up to date
                // UpdateAvailable = new version abailable
                // RollbackAvailable = rollback available
                
                if ^mv:UpdateStatus Equals "NoChanges"
                    // Add the shortcut to the ShortcutsUpToDate list.
                otherwise
                    // 1 or -1
                    // TODO: Get Icon
                    // GetVariable mv:MyShortcuts
                    // FilterFiles :filter{name is v:RSD.name}
                    // GetImagesFromInput
                end
                
            otherwise
                AddToVariable ^(text "The shortcut \(v:RSD.name) is no longer installed.") v:WarningList
            end
        
        end
        Nothing
    end

otherwise
end

if Equals "RunCFU"
    
    List ["---"] -> v:WarningList
    
    // Upgrade old data
    Dictionary{action:"UpgradeOldCFUData"}
    RunShortcut mv:ThisShortcut false
    AddToVariable v:WarningList
    
    // Download shortcut remote data (very slow)
    Dictionary{action:"DownloadAllRemoteShortcutData"}
    RunShortcut mv:ThisShortcut false -> mv:RemoteShortcutData
    AddToVariable ^(mv:RemoteShortcutData.warnings) v:WarningList
    
    // Compare all versions and get back only a list of shortcuts that need upgrading/downgrading
    
    // Show all warnings
    GetVariable v:WarningList
    RepeatWithEach
        if Equals "---"; Nothing; otherwise; end
    End -> v:WarningList
    Count Items
    If Equals 0
    Otherwise
        ShowResult
        | A few potential errors occured while checking your shortcuts for updates:
        | ---
        | \(CombineText ^(v:WarningList), Custom, (text "\n---\n"))
        | ---
    End
    
otherwise
end
